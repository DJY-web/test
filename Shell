#!/bin/bash

# 读取目录中所有文件的=号后面的值，并将结果输出到指定文件
# 假设目录名为dir，结果文件名为output.txt

# 遍历目录中的所有文件
for file in dir/*
do
  # 读取文件中所有=号后面的值
  values=$(grep -oE '=[^[:space:]]+' "$file")

  # 遍历每个值
  for value in $values
  do
    # 去掉=号
    value=${value:1}

    # 在这里处理每个值
    # 如果值是一个IP地址，您可以使用如下命令验证：
    # if [[ $value =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    #   echo "$value is a valid IP address"
    # else
    #   echo "$value is not a valid IP address"
    # fi

    # 将值追加到结果文件中
    echo "$value" >> output.txt
  done
done


# 去掉两端的双引号
value=${value//\"/}

# 去掉字符串中所有的双引号
value=${value//\"/}



# 获取当前的系统时间
time=$(date +%Y%m%d%H%M%S)

# 将运行日志输出到指定的文件中
./your_script.sh > /path/to/logs/$time.log





# Get current date and time
DATE=$(date +"%Y-%m-%d_%H-%M-%S")

# Use current date and time as log file name
LOG_FILE="log_$DATE.txt"

# Check if the file exists in the specified path
if [ -f /path/to/file ]; then
  # If the file exists, run the second script
  sh /path/to/second/script.sh | tee -a $LOG_FILE

  # Kill the current shell process
  kill -9 $$
fi



# Get current date and time
DATE=$(date +"%Y-%m-%d_%H-%M-%S")

# Use current date and time as log file name
LOG_FILE="log_$DATE.txt"

# Check if the file exists in the specified path
if [ -f /path/to/file ]; then
  # If the file exists, run the second script
  sh /path/to/second/script.sh | tee -a $LOG_FILE

  # Kill the current shell process
  kill -9 $$
fi

# Output the log of the first script
tee -a $LOG_FILE


#!/bin/bash

# 检查指定路径下是否存在至少一个文件
if [ -f /path/to/files/* ]; then
  # 如果存在，执行脚本2
  /path/to/script2
else
  # 如果不存在，执行脚本3
  /path/to/script3
fi

# 将脚本1的执行结果输出到指定文件中
echo "The result of script1 is: $?" > /path/to/output/file




if [ $(ls -A /path/to/dir | wc -l) -gt 0 ]; then
  echo "1"
else
  echo "2"
fi


find "$(pwd)" -maxdepth 1 -type d -exec echo {} >> /path/to/file \;



#!/bin/sh

# 指定要写入文件的路径
path="/path/to/dir"

# 遍历指定路径下的全部文件
for file in $path/*
do
  # 将文件内容一条一条写入文件
  cat "$file" >> output.txt
done



#!/bin/sh

# 指定要操作的路径
path="/path/to/dir"

# 遍历指定路径下的全部文件
# 注意：使用 -maxdepth 1 参数，只遍历当前路径，不包括子路径
for file in $(find $path -maxdepth 1 -type f)
do
  # 在此处执行操作，例如打印文件名
  echo "$file"
done



if [ $? -ne 0 ]; then
  echo "1"
fi


set -e

for i in $(seq 1 10); do
  # 这里是你要运行的命令
  if [ $? -ne 1 ]; then
    echo "命令运行失败！"
    exit 1
  fi
done


#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void log_time() {
  time_t t = time(NULL);
  struct tm tm = *localtime(&t);
  char s[64];
  strftime(s, sizeof(s), "%c", &tm);
  printf("当前时间: %s\n", s);
}


int main() {
  log_time();
  return 0;
}




#!/bin/bash

log_file="/path/to/log/file.log"

function log_time() {
  # Get the current date and time
  time=$(date)

  # Append the time to the log file
  echo "$time" >> "$log_file"
}

# Call the log_time function to write the time to the log file
log_time





#!/bin/bash

# Store the current date and time in a variable
time=$(date)

# Print the time before each line of output
echo "当前时间: $time"
echo "这是第一行输出"
echo "这是第二行输出"


#!/bin/bash

log_file="/path/to/log/file.log"

function log() {
  # Get the current date and time
  time=$(date)

  # Write the time and the log message to the log file
  echo "$time: $1" >> "$log_file"
}

# Call the log function to write a message to the log file
log "这是第一条日志消息"
log "这是第二条日志消息"


#!/bin/bash

# 运行B脚本
./B.sh

# 获取B脚本的执行结果
result=$?

# 记录时间戳
timestamp=$(date +%Y-%m-%d %H:%M:%S)

# 将B脚本的执行结果和时间戳记录到log文件中
echo "$timestamp, $result" >> log.txt

# 如果B脚本执行成功，则运行C脚本
if [ $result -eq 0 ]; then
  ./C.sh
else
  # 否则运行D脚本
  ./D.sh
fi



#!/bin/bash

# 设置特别目录和特定文件的路径
dir="special_directory"
file="special_file"

# 检查特别目录下是否存在特定文件
if [ -f $dir/$file ]; then
  exit 0
else
  exit 1
fi



#!/bin/bash

# 创建一个管道
mkfifo my_pipe

# 在后台运行子进程
./child.sh &

# 在父进程中读取管道中的数据，并将数据赋值给变量
read variable < my_pipe

# 显示变量的值
echo $variable


#!/bin/bash

# 在子进程中定义一个变量
variable=123

# 将变量的值赋值给环境变量
export variable

# 在后台运行子进程
./child.sh &

# 在父进程中读取环境变量的值，并将值赋值给变量
variable=$variable

# 显示变量的值
echo $variable




